&parser.Bazaar{
  Package: &parser.PackageDecl{
    Domain: []string{
      "edgecases",
    },
  },
  Decls: []*parser.TopLevelDecl{
    {
      Enum: &parser.EnumDecl{
        Name: "EmptyEnum",
      },
    },
    {
      Enum: &parser.EnumDecl{
        Name: "TrailingCommaEnum",
        Cases: []string{
          "a",
          "b",
          "c",
        },
      },
    },
    {
      Component: &parser.ComponentDecl{
        Name: "EmptyComponent",
      },
    },
    {
      Data: &parser.DataDecl{
        Name: "EmptyData",
      },
    },
    {
      Template: &parser.TemplateDecl{
        Name: "EmptyTemplate",
      },
    },
    {
      Function: &parser.FunctionDecl{
        Name: "EdgeCases",
        Block: []*parser.Stmt{
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"component",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"foo",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"data",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"bar",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"modifier",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"baz",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"package",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"qux",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"len",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"foo",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"enumerate",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"bar",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"range",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"baz",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            If: &parser.IfStmt{
              If: &parser.ConditionalBlock{
                Fragments: []*parser.ConditionalFragment{
                  {
                    Expr: &parser.ControlExpr{
                      Unary: &parser.ControlUnaryExpr{
                        Primary: &parser.ControlPrimaryExpr{
                          Reference: &parser.ControlReferenceExpr{
                            Name: &"something",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            If: &parser.IfStmt{
              If: &parser.ConditionalBlock{
                Fragments: []*parser.ConditionalFragment{
                  {
                    Expr: &parser.ControlExpr{
                      Unary: &parser.ControlUnaryExpr{
                        Primary: &parser.ControlPrimaryExpr{
                          Reference: &parser.ControlReferenceExpr{
                            Name: &"something",
                            KeyPath: &parser.ControlKeyPathExpr{
                              Call: &parser.ControlCallExpr{
                                Arguments: []*parser.ArgumentExpr{
                                  {
                                    Expr: &parser.Expr{
                                      Unary: &parser.UnaryExpr{
                                        Primary: &parser.PrimaryExpr{
                                          Lambda: &parser.LambdaExpr{
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"arrayWithTrailing",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Array: &parser.ArrayLiteral{
                        Values: []*parser.Expr{
                          {
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"1",
                                },
                              },
                            },
                          },
                          {
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"2",
                                },
                              },
                            },
                          },
                          {
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"3",
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"mapWithTrailing",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Map: &parser.MapLiteral{
                        Entries: []*parser.MapEntry{
                          {
                            Key: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"a",
                                  },
                                },
                              },
                            },
                            Value: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"1",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Key: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"b",
                                  },
                                },
                              },
                            },
                            Value: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"2",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            For: &parser.ForStmt{
              Dest: &parser.VariableExpr{
                Destructuring: &parser.DestructuringExpr{
                  Names: []string{
                    "a",
                    "b",
                  },
                },
              },
              Source: &parser.ControlExpr{
                Unary: &parser.ControlUnaryExpr{
                  Primary: &parser.ControlPrimaryExpr{
                    Reference: &parser.ControlReferenceExpr{
                      Name: &"something",
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"callable",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Reference: &parser.ReferenceExpr{
                      Name: &"SomeCallable",
                      KeyPath: &parser.KeyPathExpr{
                        Call: &parser.CallExpr{
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Expr: &parser.Expr{
              Unary: &parser.UnaryExpr{
                Primary: &parser.PrimaryExpr{
                  Lambda: &parser.LambdaExpr{
                    Stmts: []*parser.Stmt{
                      {
                        Return: &parser.ReturnStmt{
                          Value: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"42",
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"callable",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Reference: &parser.ReferenceExpr{
                      Name: &"SomeCallable",
                    },
                  },
                },
              },
            },
          },
          {
            Expr: &parser.Expr{
              Unary: &parser.UnaryExpr{
                Primary: &parser.PrimaryExpr{
                  Lambda: &parser.LambdaExpr{
                    Stmts: []*parser.Stmt{
                      {
                        Return: &parser.ReturnStmt{
                          Value: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"42",
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}

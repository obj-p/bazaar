&parser.Bazaar{
  Package: &parser.PackageDecl{
    Domain: []string{
      "edgecases",
    },
  },
  Decls: []*parser.TopLevelDecl{
    {
      Enum: &parser.EnumDecl{
        Name: "EmptyEnum",
      },
    },
    {
      Component: &parser.ComponentDecl{
        Name: "EmptyComponent",
      },
    },
    {
      Data: &parser.DataDecl{
        Name: "EmptyData",
      },
    },
    {
      Template: &parser.TemplateDecl{
        Name: "EmptyTemplate",
      },
    },
    {
      Function: &parser.FunctionDecl{
        Name: "EdgeCases",
        Block: []*parser.Stmt{
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"component",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"foo",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"data",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"bar",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"modifier",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"baz",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"package",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"qux",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Annotation: &parser.AnnotationExpr{
                Name: &"State",
              },
              Dest: &parser.VariableExpr{
                Name: &"count",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"0",
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}

&parser.Bazaar{
  Package: &parser.PackageDecl{
    Domain: []string{
      "fors",
    },
  },
  Decls: []*parser.TopLevelDecl{
    {
      Template: &parser.TemplateDecl{
        Name: "Fors",
        Parameters: []*parser.ParameterDecl{
          {
            Name: "list",
            Type: &parser.TypeDecl{
              Array: &parser.ArrayTypeDecl{
                Value: parser.TypeDecl{
                  Value: &"string",
                },
              },
            },
          },
          {
            Name: "map",
            Type: &parser.TypeDecl{
              Map: &parser.MapTypeDecl{
                Key: parser.TypeDecl{
                  Value: &"string",
                },
                Value: parser.TypeDecl{
                  Value: &"int",
                },
              },
            },
          },
        },
        Block: []*parser.Stmt{
          {
            For: &parser.ForStmt{
              Dest: &parser.VariableExpr{
                Name: &"value",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Reference: &parser.ReferenceExpr{
                      Name: &"list",
                    },
                  },
                },
              },
            },
          },
          {
            For: &parser.ForStmt{
              Dest: &parser.VariableExpr{
                Name: &"entry",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Reference: &parser.ReferenceExpr{
                      Name: &"map",
                    },
                  },
                },
              },
            },
          },
          {
            For: &parser.ForStmt{
              Dest: &parser.VariableExpr{
                Name: &"entry",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    BuiltIn: &parser.BuiltInExpr{
                      Name: &"enumerate",
                      Arguments: []*parser.ArgumentExpr{
                        {
                          Expr: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Reference: &parser.ReferenceExpr{
                                  Name: &"map",
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            For: &parser.ForStmt{
              Dest: &parser.VariableExpr{
                Name: &"idx",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    BuiltIn: &parser.BuiltInExpr{
                      Name: &"range",
                      Arguments: []*parser.ArgumentExpr{
                        {
                          Expr: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"0",
                                },
                              },
                            },
                          },
                        },
                        {
                          Expr: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"10",
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            For: &parser.ForStmt{
              Dest: &parser.VariableExpr{
                Destructuring: &parser.DestructuringExpr{
                },
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    BuiltIn: &parser.BuiltInExpr{
                      Name: &"enumerate",
                      Arguments: []*parser.ArgumentExpr{
                        {
                          Expr: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Reference: &parser.ReferenceExpr{
                                  Name: &"list",
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            For: &parser.ForStmt{
              Dest: &parser.VariableExpr{
                Destructuring: &parser.DestructuringExpr{
                },
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    BuiltIn: &parser.BuiltInExpr{
                      Name: &"enumerate",
                      Arguments: []*parser.ArgumentExpr{
                        {
                          Expr: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Reference: &parser.ReferenceExpr{
                                  Name: &"map",
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"idx",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"0",
                    },
                  },
                },
              },
            },
          },
          {
            For: &parser.ForStmt{
              Expr: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Reference: &parser.ReferenceExpr{
                          Name: &"idx",
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpLt),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        BuiltIn: &parser.BuiltInExpr{
                          Name: &"len",
                          Arguments: []*parser.ArgumentExpr{
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Reference: &parser.ReferenceExpr{
                                      Name: &"list",
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
              Block: []*parser.Stmt{
                {
                  Assign: &parser.AssignStmt{
                    Name: &"idx",
                    Op: &token.Op(token.OpAddAssign),
                    Value: &parser.Expr{
                      Unary: &parser.UnaryExpr{
                        Primary: &parser.PrimaryExpr{
                          Literal: &parser.Literal{
                            Number: &"1",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}

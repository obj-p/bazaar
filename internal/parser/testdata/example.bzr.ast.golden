&parser.Bazaar{
  Package: &parser.PackageDecl{
    Domain: []string{
      "example",
    },
  },
  Imports: []*parser.ImportDecl{
    {
      Domain: []string{
        "layout",
      },
    },
  },
  Decls: []*parser.TopLevelDecl{
    {
      Enum: &parser.EnumDecl{
        Name: "RowAlignment",
        Cases: []string{
          "top",
          "center",
          "bottom",
        },
      },
    },
    {
      Component: &parser.ComponentDecl{
        Name: "Row",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "alignment",
              Type: &parser.TypeDecl{
                Value: &"RowAlignment",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    ImplicitRef: &parser.ReferenceExpr{
                      Name: &"center",
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "children",
              Type: &parser.TypeDecl{
                Array: &parser.ArrayTypeDecl{
                  Value: parser.TypeDecl{
                    Value: &"component",
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Component: &parser.ComponentDecl{
        Name: "Button",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "label",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "onClick",
              Type: &parser.TypeDecl{
                Function: &parser.FunctionTypeDecl{
                },
                Optional: true,
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Null: true,
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Component: &parser.ComponentDecl{
        Name: "Text",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "value",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
            },
          },
        },
      },
    },
    {
      Modifier: &parser.ModifierDecl{
        Name: "Padding",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "top",
              Type: &parser.TypeDecl{
                Value: &"double",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"0",
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "leading",
              Type: &parser.TypeDecl{
                Value: &"double",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"0",
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "bottom",
              Type: &parser.TypeDecl{
                Value: &"double",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"0",
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "trailing",
              Type: &parser.TypeDecl{
                Value: &"double",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"0",
                    },
                  },
                },
              },
            },
          },
          {
            Constructor: &parser.ConstructorDecl{
              Parameters: []*parser.ParameterDecl{
                {
                  Name: "all",
                  Type: &parser.TypeDecl{
                    Value: &"double",
                  },
                },
              },
              Expression: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Reference: &parser.ReferenceExpr{
                      Name: &"Padding",
                      KeyPath: &parser.KeyPathExpr{
                        Call: &parser.CallExpr{
                          Arguments: []*parser.ArgumentExpr{
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Reference: &parser.ReferenceExpr{
                                      Name: &"all",
                                    },
                                  },
                                },
                              },
                            },
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Reference: &parser.ReferenceExpr{
                                      Name: &"all",
                                    },
                                  },
                                },
                              },
                            },
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Reference: &parser.ReferenceExpr{
                                      Name: &"all",
                                    },
                                  },
                                },
                              },
                            },
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Reference: &parser.ReferenceExpr{
                                      Name: &"all",
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Constructor: &parser.ConstructorDecl{
              Parameters: []*parser.ParameterDecl{
                {
                  Name: "vertical",
                  Type: &parser.TypeDecl{
                    Value: &"double",
                  },
                },
                {
                  Name: "horizontal",
                  Type: &parser.TypeDecl{
                    Value: &"double",
                  },
                },
              },
              Expression: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Reference: &parser.ReferenceExpr{
                      Name: &"Padding",
                      KeyPath: &parser.KeyPathExpr{
                        Call: &parser.CallExpr{
                          Arguments: []*parser.ArgumentExpr{
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Reference: &parser.ReferenceExpr{
                                      Name: &"vertical",
                                    },
                                  },
                                },
                              },
                            },
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Reference: &parser.ReferenceExpr{
                                      Name: &"horizontal",
                                    },
                                  },
                                },
                              },
                            },
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Reference: &parser.ReferenceExpr{
                                      Name: &"vertical",
                                    },
                                  },
                                },
                              },
                            },
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Reference: &parser.ReferenceExpr{
                                      Name: &"horizontal",
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Function: &parser.FunctionDecl{
        Name: "Add",
        Parameters: []*parser.ParameterDecl{
          {
            Name: "x",
            Type: &parser.TypeDecl{
              Value: &"int",
            },
          },
          {
            Name: "y",
            Type: &parser.TypeDecl{
              Value: &"int",
            },
          },
        },
        Return: &parser.TypeDecl{
          Value: &"int",
        },
      },
    },
    {
      Function: &parser.FunctionDecl{
        Name: "Truncate",
        Parameters: []*parser.ParameterDecl{
          {
            Name: "x",
            Type: &parser.TypeDecl{
              Value: &"double",
            },
          },
        },
        Return: &parser.TypeDecl{
          Value: &"int",
        },
      },
    },
    {
      Function: &parser.FunctionDecl{
        Name: "Print",
        Parameters: []*parser.ParameterDecl{
          {
            Name: "message",
            Type: &parser.TypeDecl{
              Value: &"string",
            },
          },
        },
      },
    },
    {
      Function: &parser.FunctionDecl{
        Name: "Dismiss",
        Parameters: []*parser.ParameterDecl{
          {
            Name: "animated",
            Type: &parser.TypeDecl{
              Value: &"bool",
            },
            Default: &parser.Expr{
              Unary: &parser.UnaryExpr{
                Primary: &parser.PrimaryExpr{
                  Literal: &parser.Literal{
                    Bool: &parser.Bool(false),
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Data: &parser.DataDecl{
        Name: "Point",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "x",
              Type: &parser.TypeDecl{
                Value: &"double",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"0.0",
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "y",
              Type: &parser.TypeDecl{
                Value: &"double",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"0",
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Data: &parser.DataDecl{
        Name: "TextAndButtonRowModel",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "value",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Hello, world!",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "label",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Click, me!",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "message",
              Type: &parser.TypeDecl{
                Value: &"string",
                Optional: true,
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Null: true,
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Template: &parser.TemplateDecl{
        Name: "TextAndButtonRow",
        Parameters: []*parser.ParameterDecl{
          {
            Name: "models",
            Type: &parser.TypeDecl{
              Array: &parser.ArrayTypeDecl{
                Value: parser.TypeDecl{
                  Value: &"TextAndButtonRowModel",
                },
              },
            },
          },
        },
        Block: []*parser.Stmt{
          {
            Var: &parser.VarDeclStmt{
              Annotation: &parser.AnnotationExpr{
                Name: &"State",
              },
              Dest: &parser.VariableExpr{
                Name: &"count",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"0",
                    },
                  },
                },
              },
            },
          },
          {
            For: &parser.ForStmt{
              Dest: &parser.VariableExpr{
                Name: &"model",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Reference: &parser.ReferenceExpr{
                      Name: &"models",
                    },
                  },
                },
              },
              Block: []*parser.Stmt{
                {
                  Call: &parser.CallStmt{
                    Annotation: &parser.AnnotationExpr{
                      Name: &"Modifier",
                      Call: &parser.CallExpr{
                        Arguments: []*parser.ArgumentExpr{
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"Padding",
                                    KeyPath: &parser.KeyPathExpr{
                                      Call: &parser.CallExpr{
                                        Arguments: []*parser.ArgumentExpr{
                                          {
                                            Name: &"all",
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Literal: &parser.Literal{
                                                    Number: &"12.0",
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                    Name: &"Row",
                    LambdaOnly: &parser.LambdaExpr{
                      Stmts: []*parser.Stmt{
                        {
                          Call: &parser.CallStmt{
                            Name: &"Text",
                            Arguments: []*parser.ArgumentExpr{
                              {
                                Expr: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"model",
                                        KeyPath: &parser.KeyPathExpr{
                                          Reference: &parser.ReferenceExpr{
                                            Name: &"value",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                        {
                          Call: &parser.CallStmt{
                            Name: &"Button",
                            Arguments: []*parser.ArgumentExpr{
                              {
                                Expr: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"model",
                                        KeyPath: &parser.KeyPathExpr{
                                          Reference: &parser.ReferenceExpr{
                                            Name: &"label",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            TrailingLambda: &parser.LambdaExpr{
                              Stmts: []*parser.Stmt{
                                {
                                  Assign: &parser.AssignStmt{
                                    Name: &"count",
                                    Op: &token.Op(token.OpAddAssign),
                                    Value: &parser.Expr{
                                      Unary: &parser.UnaryExpr{
                                        Primary: &parser.PrimaryExpr{
                                          Literal: &parser.Literal{
                                            Number: &"1",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                                {
                                  If: &parser.IfStmt{
                                    Fragments: []*parser.IfFragment{
                                      {
                                        Var: &parser.VarDeclStmt{
                                          Dest: &parser.VariableExpr{
                                            Name: &"message",
                                          },
                                          Source: &parser.Expr{
                                            Unary: &parser.UnaryExpr{
                                              Primary: &parser.PrimaryExpr{
                                                Reference: &parser.ReferenceExpr{
                                                  Name: &"model",
                                                  KeyPath: &parser.KeyPathExpr{
                                                    Reference: &parser.ReferenceExpr{
                                                      Name: &"message",
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                    Block: []*parser.Stmt{
                                      {
                                        Call: &parser.CallStmt{
                                          Name: &"Print",
                                          Arguments: []*parser.ArgumentExpr{
                                            {
                                              Expr: &parser.Expr{
                                                Unary: &parser.UnaryExpr{
                                                  Primary: &parser.PrimaryExpr{
                                                    Reference: &parser.ReferenceExpr{
                                                      Name: &"message",
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Preview: &parser.PreviewDecl{
        Name: "TextAndButtonRowPreview",
      },
    },
  },
}

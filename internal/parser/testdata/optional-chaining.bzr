package optionalchaining

func OptionalChaining() {
    var result = obj?.property
    var method = obj?.method()
    var nested = obj?.nested?.property

    var indexed = array?[0]
    var deepIndexed = array?[0]?.field

    var called = func?(param)
    var chainedCall = obj?.method()?.result

    if obj?.property {}
    var conditional = obj?.value > 0

    // Complex optional chaining from edge-cases.bzr
    var complexResult = obj?.method()?.property
    var complexIndexed = array?[0]?.field
    var complexCalled = func?(param)?.result

    // Complex optional chaining combinations - these work correctly
    var complex = obj?.arr?[idx]?.call()
    var mixedChain = items?[0]?.name
    var deepChain = root?.child?.grandchild?.value

    // Null coalescing with optional chaining
    var arithmetic = (obj?.count ?? 0) + 1
    var chained = obj?.value ?? other?.value ?? "default"
}

&parser.Bazaar{
  Package: &parser.PackageDecl{
    Domain: []string{
      "assigns",
    },
  },
  Decls: []*parser.TopLevelDecl{
    {
      Function: &parser.FunctionDecl{
        Name: "Assigns",
        Block: []*parser.Stmt{
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"answer",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"42",
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"answer",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"42.0",
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"answer",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"42",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"answer",
              },
              Type: &parser.TypeDecl{
                Value: &"int",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"42",
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"answer",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Lambda: &parser.LambdaExpr{
                      Stmts: []*parser.Stmt{
                        {
                          Return: &parser.ReturnStmt{
                            Value: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"42",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Assign: &parser.AssignStmt{
              Name: &"answer",
              Op: &token.Op(token.OpAddAssign),
              Value: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"0",
                    },
                  },
                },
              },
            },
          },
          {
            Assign: &parser.AssignStmt{
              Name: &"answer",
              Op: &token.Op(token.OpSubAssign),
              Value: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"0",
                    },
                  },
                },
              },
            },
          },
          {
            Assign: &parser.AssignStmt{
              Name: &"answer",
              Op: &token.Op(token.OpModAssign),
              Value: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"128",
                    },
                  },
                },
              },
            },
          },
          {
            Assign: &parser.AssignStmt{
              Name: &"answer",
              Op: &token.Op(token.OpDivAssign),
              Value: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"1",
                    },
                  },
                },
              },
            },
          },
          {
            Assign: &parser.AssignStmt{
              Name: &"answer",
              Op: &token.Op(token.OpMulAssign),
              Value: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      Number: &"1",
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}

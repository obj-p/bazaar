package references

func References() {
    // Basic property access
    var prop = obj.property
    var nested = obj.property.nested
    var deep = obj.level1.level2.level3

    // Method calls
    var result = obj.method()
    var chained = obj.method().property
    var methodChain = obj.method1().method2()
    var methodNested = obj.getData().process()

    // Array indexing (non-optional)
    var first = array[0]
    var item = list[index]
    var calculated = array[i + 1]
    var expression = items[len(other) - 1]

    // Map/object indexing
    var value = map["key"]
    var config = settings["theme"]
    var dynamic = data[keyName]

    // Matrix/nested indexing
    var cell = matrix[row][col]
    var deep = nested[outer][inner]
    var combined = nested[outer][inner].property

    // Complex mixed patterns
    var complex1 = getData().items[0].name
    var complex2 = obj.getArray()[index].method()
    var complex3 = config.settings["theme"].colors[0]
    var complex4 = root.children[i].data.value

    // Indexing with complex expressions
    var calculated1 = grid[x * width + y]
    var calculated2 = buffer[offset + size]


    // Preserved original complex optional pattern for comparison
    var originalPattern = model?[0]?("hello, world!")?.foobar
}

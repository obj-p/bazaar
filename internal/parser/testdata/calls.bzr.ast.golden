&parser.Bazaar{
  Package: &parser.PackageDecl{
    Domain: []string{
      "calls",
    },
  },
  Decls: []*parser.TopLevelDecl{
    {
      Function: &parser.FunctionDecl{
        Name: "Calls",
        Block: []*parser.Stmt{
          {
            Expr: &parser.Expr{
              Unary: &parser.UnaryExpr{
                Primary: &parser.PrimaryExpr{
                  Reference: &parser.ReferenceExpr{
                    Name: &"Print",
                    KeyPath: &parser.KeyPathExpr{
                      Call: &parser.CallExpr{
                        Arguments: []*parser.ArgumentExpr{
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    String: &parser.String{
                                      Fragments: []*parser.StringFragment{
                                        {
                                          Text: &"Hello, world!",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Expr: &parser.Expr{
              Unary: &parser.UnaryExpr{
                Primary: &parser.PrimaryExpr{
                  Reference: &parser.ReferenceExpr{
                    Name: &"BlockLiteral",
                    KeyPath: &parser.KeyPathExpr{
                      Call: &parser.CallExpr{
                        Arguments: []*parser.ArgumentExpr{
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Lambda: &parser.LambdaExpr{
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Expr: &parser.Expr{
              Unary: &parser.UnaryExpr{
                Primary: &parser.PrimaryExpr{
                  Reference: &parser.ReferenceExpr{
                    Name: &"NamedArgs",
                    KeyPath: &parser.KeyPathExpr{
                      Call: &parser.CallExpr{
                        Arguments: []*parser.ArgumentExpr{
                          {
                            Name: &"first",
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"1337",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Name: &"second",
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    String: &parser.String{
                                      Fragments: []*parser.StringFragment{
                                        {
                                          Text: &"second",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Expr: &parser.Expr{
              Unary: &parser.UnaryExpr{
                Primary: &parser.PrimaryExpr{
                  Reference: &parser.ReferenceExpr{
                    Name: &"TrailingBlockLiteral",
                  },
                },
              },
            },
          },
          {
            Expr: &parser.Expr{
              Unary: &parser.UnaryExpr{
                Primary: &parser.PrimaryExpr{
                  Lambda: &parser.LambdaExpr{
                  },
                },
              },
            },
          },
          {
            Expr: &parser.Expr{
              Unary: &parser.UnaryExpr{
                Primary: &parser.PrimaryExpr{
                  Reference: &parser.ReferenceExpr{
                    Name: &"call",
                    KeyPath: &parser.KeyPathExpr{
                      Call: &parser.CallExpr{
                        Arguments: []*parser.ArgumentExpr{
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"first",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"second",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}

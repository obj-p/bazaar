&parser.Bazaar{
  Package: &parser.PackageDecl{
    Domain: []string{
      "strings",
    },
  },
  Decls: []*parser.TopLevelDecl{
    {
      Data: &parser.DataDecl{
        Name: "Messages",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "answer",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"The answer is ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"42",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "escaped",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Esc: &"\\\"",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Data: &parser.DataDecl{
        Name: "ComplexInterpolation",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "arithmetic",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Result: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Binary: &parser.BinaryExpr{
                                Left: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"x",
                                      },
                                    },
                                  },
                                },
                                Op: token.Op(token.OpAdd),
                                Right: &parser.Expr{
                                  Binary: &parser.BinaryExpr{
                                    Left: &parser.Expr{
                                      Unary: &parser.UnaryExpr{
                                        Primary: &parser.PrimaryExpr{
                                          Reference: &parser.ReferenceExpr{
                                            Name: &"y",
                                          },
                                        },
                                      },
                                    },
                                    Op: token.Op(token.OpMul),
                                    Right: &parser.Expr{
                                      Unary: &parser.UnaryExpr{
                                        Primary: &parser.PrimaryExpr{
                                          Literal: &parser.Literal{
                                            Number: &"2",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "functionCall",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Hello ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"getName",
                                    KeyPath: &parser.KeyPathExpr{
                                      Call: &parser.CallExpr{
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "variableRef",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"User: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"user",
                                    KeyPath: &parser.KeyPathExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"name",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "multiple",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"first",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &" and ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"second",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "methodCall",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Length: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"text",
                                    KeyPath: &parser.KeyPathExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"length",
                                        KeyPath: &parser.KeyPathExpr{
                                          Call: &parser.CallExpr{
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Data: &parser.DataDecl{
        Name: "EscapeSequences",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "newline",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Line 1",
                          },
                          {
                            Esc: &"\\n",
                          },
                          {
                            Text: &"Line 2",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "tab",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Col1",
                          },
                          {
                            Esc: &"\\t",
                          },
                          {
                            Text: &"Col2",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "backslash",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Path",
                          },
                          {
                            Esc: &"\\\\",
                          },
                          {
                            Text: &"to",
                          },
                          {
                            Esc: &"\\\\",
                          },
                          {
                            Text: &"file",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "mixed",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Quote: ",
                          },
                          {
                            Esc: &"\\\"",
                          },
                          {
                            Text: &" Newline: ",
                          },
                          {
                            Esc: &"\\n",
                          },
                          {
                            Text: &" Tab: ",
                          },
                          {
                            Esc: &"\\t",
                          },
                          {
                            Text: &" Backslash: ",
                          },
                          {
                            Esc: &"\\\\",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "unicodeEscape",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Unicode: ",
                          },
                          {
                            Esc: &"\\u",
                          },
                          {
                            Text: &"0041",
                          },
                          {
                            Esc: &"\\u",
                          },
                          {
                            Text: &"0042",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Data: &parser.DataDecl{
        Name: "EdgeCases",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "empty",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "whitespace",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"   ",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "specialChars",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"@#",
                          },
                          {
                            Text: &"$",
                          },
                          {
                            Text: &"%^&*()",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "dollarSign",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Cost: ",
                          },
                          {
                            Text: &"$",
                          },
                          {
                            Text: &"5",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "trailingBackslash",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"path",
                          },
                          {
                            Esc: &"\\\\",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "multipleSpaces",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"word1    word2",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "onlyNumbers",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"12345",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Data: &parser.DataDecl{
        Name: "ComplexScenarios",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "arithmeticExpr",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Result: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Binary: &parser.BinaryExpr{
                                Left: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Nested: &parser.Expr{
                                        Binary: &parser.BinaryExpr{
                                          Left: &parser.Expr{
                                            Unary: &parser.UnaryExpr{
                                              Primary: &parser.PrimaryExpr{
                                                Reference: &parser.ReferenceExpr{
                                                  Name: &"a",
                                                },
                                              },
                                            },
                                          },
                                          Op: token.Op(token.OpAdd),
                                          Right: &parser.Expr{
                                            Unary: &parser.UnaryExpr{
                                              Primary: &parser.PrimaryExpr{
                                                Reference: &parser.ReferenceExpr{
                                                  Name: &"b",
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                                Op: token.Op(token.OpMul),
                                Right: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"c",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "booleanExpr",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Status: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Binary: &parser.BinaryExpr{
                                Left: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"isActive",
                                      },
                                    },
                                  },
                                },
                                Op: token.Op(token.OpAnd),
                                Right: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"isValid",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "chainedAccess",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Data: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"obj",
                                    KeyPath: &parser.KeyPathExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"field",
                                        KeyPath: &parser.KeyPathExpr{
                                          Reference: &parser.ReferenceExpr{
                                            Name: &"subfield",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "arrayAccess",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Item: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"items",
                                    KeyPath: &parser.KeyPathExpr{
                                      Subscript: &parser.Expr{
                                        Unary: &parser.UnaryExpr{
                                          Primary: &parser.PrimaryExpr{
                                            Literal: &parser.Literal{
                                              Number: &"0",
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "powerOperator",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Power: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Binary: &parser.BinaryExpr{
                                Left: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"x",
                                      },
                                    },
                                  },
                                },
                                Op: token.Op(token.OpPow),
                                Right: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Literal: &parser.Literal{
                                        Number: &"2",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "nullCoalescing",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Value: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Binary: &parser.BinaryExpr{
                                Left: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"value",
                                      },
                                    },
                                  },
                                },
                                Op: token.Op(token.OpCoalesce),
                                Right: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"defaultValue",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Data: &parser.DataDecl{
        Name: "RealWorldUsage",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "url",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"https://example.com/api/users/",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"userId",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "filePath",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"/home/user/documents/",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"filename",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &".txt",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "sqlLike",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"SELECT * FROM users WHERE id = ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"id",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "templateLike",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Dear ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"name",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &", welcome to ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"appName",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &"!",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "logMessage",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"[",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"timestamp",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &"] ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"level",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &": ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"message",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "cssClass",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"class-",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"type",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &"-",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"variant",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Data: &parser.DataDecl{
        Name: "StringConcatenation",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "simpleConcat",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              String: &parser.String{
                                Fragments: []*parser.StringFragment{
                                  {
                                    Text: &"Hello",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpAdd),
                      Right: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              String: &parser.String{
                                Fragments: []*parser.StringFragment{
                                  {
                                    Text: &" ",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpAdd),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          String: &parser.String{
                            Fragments: []*parser.StringFragment{
                              {
                                Text: &"World",
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "mixedConcat",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          String: &parser.String{
                            Fragments: []*parser.StringFragment{
                              {
                                Text: &"Count: ",
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpAdd),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          String: &parser.String{
                            Fragments: []*parser.StringFragment{
                              {
                                Expr: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"count",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "multipleOps",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Binary: &parser.BinaryExpr{
                          Left: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  String: &parser.String{
                                    Fragments: []*parser.StringFragment{
                                      {
                                        Text: &"A",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                          Op: token.Op(token.OpAdd),
                          Right: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  String: &parser.String{
                                    Fragments: []*parser.StringFragment{
                                      {
                                        Text: &"B",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpAdd),
                      Right: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              String: &parser.String{
                                Fragments: []*parser.StringFragment{
                                  {
                                    Text: &"C",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpAdd),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          String: &parser.String{
                            Fragments: []*parser.StringFragment{
                              {
                                Expr: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"suffix",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Data: &parser.DataDecl{
        Name: "NestedInterpolation",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "nestedBasic",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Outer: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"getInner",
                                    KeyPath: &parser.KeyPathExpr{
                                      Call: &parser.CallExpr{
                                        Arguments: []*parser.ArgumentExpr{
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Literal: &parser.Literal{
                                                    String: &parser.String{
                                                      Fragments: []*parser.StringFragment{
                                                        {
                                                          Text: &"Inner: ",
                                                        },
                                                        {
                                                          Expr: &parser.Expr{
                                                            Unary: &parser.UnaryExpr{
                                                              Primary: &parser.PrimaryExpr{
                                                                Reference: &parser.ReferenceExpr{
                                                                  Name: &"x",
                                                                },
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "nestedFunction",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Result: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"format",
                                    KeyPath: &parser.KeyPathExpr{
                                      Call: &parser.CallExpr{
                                        Arguments: []*parser.ArgumentExpr{
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Literal: &parser.Literal{
                                                    String: &parser.String{
                                                      Fragments: []*parser.StringFragment{
                                                        {
                                                          Text: &"Value: ",
                                                        },
                                                        {
                                                          Expr: &parser.Expr{
                                                            Unary: &parser.UnaryExpr{
                                                              Primary: &parser.PrimaryExpr{
                                                                Reference: &parser.ReferenceExpr{
                                                                  Name: &"getValue",
                                                                  KeyPath: &parser.KeyPathExpr{
                                                                    Call: &parser.CallExpr{
                                                                    },
                                                                  },
                                                                },
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "nestedConditionalSimple",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Status: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"getStatus",
                                    KeyPath: &parser.KeyPathExpr{
                                      Call: &parser.CallExpr{
                                        Arguments: []*parser.ArgumentExpr{
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Reference: &parser.ReferenceExpr{
                                                    Name: &"isActive",
                                                  },
                                                },
                                              },
                                            },
                                          },
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Reference: &parser.ReferenceExpr{
                                                    Name: &"level",
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "nestedArithmetic",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Calc: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"compute",
                                    KeyPath: &parser.KeyPathExpr{
                                      Call: &parser.CallExpr{
                                        Arguments: []*parser.ArgumentExpr{
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Literal: &parser.Literal{
                                                    String: &parser.String{
                                                      Fragments: []*parser.StringFragment{
                                                        {
                                                          Text: &"Base: ",
                                                        },
                                                        {
                                                          Expr: &parser.Expr{
                                                            Unary: &parser.UnaryExpr{
                                                              Primary: &parser.PrimaryExpr{
                                                                Reference: &parser.ReferenceExpr{
                                                                  Name: &"base",
                                                                },
                                                              },
                                                            },
                                                          },
                                                        },
                                                        {
                                                          Text: &" + ",
                                                        },
                                                        {
                                                          Expr: &parser.Expr{
                                                            Unary: &parser.UnaryExpr{
                                                              Primary: &parser.PrimaryExpr{
                                                                Reference: &parser.ReferenceExpr{
                                                                  Name: &"offset",
                                                                },
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "deepNesting",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"L1: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"level1",
                                    KeyPath: &parser.KeyPathExpr{
                                      Call: &parser.CallExpr{
                                        Arguments: []*parser.ArgumentExpr{
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Literal: &parser.Literal{
                                                    String: &parser.String{
                                                      Fragments: []*parser.StringFragment{
                                                        {
                                                          Text: &"L2: ",
                                                        },
                                                        {
                                                          Expr: &parser.Expr{
                                                            Unary: &parser.UnaryExpr{
                                                              Primary: &parser.PrimaryExpr{
                                                                Reference: &parser.ReferenceExpr{
                                                                  Name: &"level2",
                                                                  KeyPath: &parser.KeyPathExpr{
                                                                    Call: &parser.CallExpr{
                                                                      Arguments: []*parser.ArgumentExpr{
                                                                        {
                                                                          Expr: &parser.Expr{
                                                                            Unary: &parser.UnaryExpr{
                                                                              Primary: &parser.PrimaryExpr{
                                                                                Literal: &parser.Literal{
                                                                                  String: &parser.String{
                                                                                    Fragments: []*parser.StringFragment{
                                                                                      {
                                                                                        Text: &"L3: ",
                                                                                      },
                                                                                      {
                                                                                        Expr: &parser.Expr{
                                                                                          Unary: &parser.UnaryExpr{
                                                                                            Primary: &parser.PrimaryExpr{
                                                                                              Reference: &parser.ReferenceExpr{
                                                                                                Name: &"level3",
                                                                                              },
                                                                                            },
                                                                                          },
                                                                                        },
                                                                                      },
                                                                                    },
                                                                                  },
                                                                                },
                                                                              },
                                                                            },
                                                                          },
                                                                        },
                                                                      },
                                                                    },
                                                                  },
                                                                },
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Data: &parser.DataDecl{
        Name: "BoundaryConditions",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "startingWithInterpolation",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"greeting",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &" world!",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "endingWithInterpolation",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Hello ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"name",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "onlyInterpolation",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"value",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "emptyStringLiteral",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "whitespaceOnly",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"   ",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "consecutiveInterpolations",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"first",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"second",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"third",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "interpolationWithSpaces",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"start",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &" middle ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"end",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "multipleSeparated",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"a",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &" and ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"b",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &" and ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"c",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "interpolationInMiddle",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"start ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"middle",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &" end",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "emptyInterpolation",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Value: ",
                          },
                          {
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Data: &parser.DataDecl{
        Name: "ComplexExpressionInterpolation",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "conditionalFunction",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Status: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"getActiveStatus",
                                    KeyPath: &parser.KeyPathExpr{
                                      Call: &parser.CallExpr{
                                        Arguments: []*parser.ArgumentExpr{
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Reference: &parser.ReferenceExpr{
                                                    Name: &"isActive",
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "functionWithArgs",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Result: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"func",
                                    KeyPath: &parser.KeyPathExpr{
                                      Call: &parser.CallExpr{
                                        Arguments: []*parser.ArgumentExpr{
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Reference: &parser.ReferenceExpr{
                                                    Name: &"a",
                                                  },
                                                },
                                              },
                                            },
                                          },
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Reference: &parser.ReferenceExpr{
                                                    Name: &"b",
                                                  },
                                                },
                                              },
                                            },
                                          },
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Reference: &parser.ReferenceExpr{
                                                    Name: &"c",
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "methodChaining",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Value: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"obj",
                                    KeyPath: &parser.KeyPathExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"method1",
                                        KeyPath: &parser.KeyPathExpr{
                                          Call: &parser.CallExpr{
                                          },
                                          Next: &parser.KeyPathExpr{
                                            Reference: &parser.ReferenceExpr{
                                              Name: &"method2",
                                              KeyPath: &parser.KeyPathExpr{
                                                Call: &parser.CallExpr{
                                                },
                                                Next: &parser.KeyPathExpr{
                                                  Reference: &parser.ReferenceExpr{
                                                    Name: &"value",
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "arrayAccessing",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Item: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"items",
                                    KeyPath: &parser.KeyPathExpr{
                                      Subscript: &parser.Expr{
                                        Unary: &parser.UnaryExpr{
                                          Primary: &parser.PrimaryExpr{
                                            Reference: &parser.ReferenceExpr{
                                              Name: &"index",
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "mapAccessing",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Value: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"data",
                                    KeyPath: &parser.KeyPathExpr{
                                      Subscript: &parser.Expr{
                                        Unary: &parser.UnaryExpr{
                                          Primary: &parser.PrimaryExpr{
                                            Literal: &parser.Literal{
                                              String: &parser.String{
                                                Fragments: []*parser.StringFragment{
                                                  {
                                                    Text: &"key",
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "arithmeticInInterpolation",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Sum: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Binary: &parser.BinaryExpr{
                                Left: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Nested: &parser.Expr{
                                        Binary: &parser.BinaryExpr{
                                          Left: &parser.Expr{
                                            Unary: &parser.UnaryExpr{
                                              Primary: &parser.PrimaryExpr{
                                                Reference: &parser.ReferenceExpr{
                                                  Name: &"a",
                                                },
                                              },
                                            },
                                          },
                                          Op: token.Op(token.OpAdd),
                                          Right: &parser.Expr{
                                            Unary: &parser.UnaryExpr{
                                              Primary: &parser.PrimaryExpr{
                                                Reference: &parser.ReferenceExpr{
                                                  Name: &"b",
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                                Op: token.Op(token.OpMul),
                                Right: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Nested: &parser.Expr{
                                        Binary: &parser.BinaryExpr{
                                          Left: &parser.Expr{
                                            Unary: &parser.UnaryExpr{
                                              Primary: &parser.PrimaryExpr{
                                                Reference: &parser.ReferenceExpr{
                                                  Name: &"c",
                                                },
                                              },
                                            },
                                          },
                                          Op: token.Op(token.OpSub),
                                          Right: &parser.Expr{
                                            Unary: &parser.UnaryExpr{
                                              Primary: &parser.PrimaryExpr{
                                                Reference: &parser.ReferenceExpr{
                                                  Name: &"d",
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "logicalOperations",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Valid: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Binary: &parser.BinaryExpr{
                                Left: &parser.Expr{
                                  Binary: &parser.BinaryExpr{
                                    Left: &parser.Expr{
                                      Unary: &parser.UnaryExpr{
                                        Primary: &parser.PrimaryExpr{
                                          Reference: &parser.ReferenceExpr{
                                            Name: &"flag1",
                                          },
                                        },
                                      },
                                    },
                                    Op: token.Op(token.OpAnd),
                                    Right: &parser.Expr{
                                      Unary: &parser.UnaryExpr{
                                        Primary: &parser.PrimaryExpr{
                                          Reference: &parser.ReferenceExpr{
                                            Name: &"flag2",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                                Op: token.Op(token.OpOr),
                                Right: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"flag3",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "comparisonOperations",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Compare: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Binary: &parser.BinaryExpr{
                                Left: &parser.Expr{
                                  Binary: &parser.BinaryExpr{
                                    Left: &parser.Expr{
                                      Binary: &parser.BinaryExpr{
                                        Left: &parser.Expr{
                                          Unary: &parser.UnaryExpr{
                                            Primary: &parser.PrimaryExpr{
                                              Reference: &parser.ReferenceExpr{
                                                Name: &"x",
                                              },
                                            },
                                          },
                                        },
                                        Op: token.Op(token.OpGte),
                                        Right: &parser.Expr{
                                          Unary: &parser.UnaryExpr{
                                            Primary: &parser.PrimaryExpr{
                                              Reference: &parser.ReferenceExpr{
                                                Name: &"y",
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                    Op: token.Op(token.OpAnd),
                                    Right: &parser.Expr{
                                      Unary: &parser.UnaryExpr{
                                        Primary: &parser.PrimaryExpr{
                                          Reference: &parser.ReferenceExpr{
                                            Name: &"z",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                                Op: token.Op(token.OpLte),
                                Right: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"w",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "nullCoalescingInString",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Default: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Binary: &parser.BinaryExpr{
                                Left: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"value",
                                      },
                                    },
                                  },
                                },
                                Op: token.Op(token.OpCoalesce),
                                Right: &parser.Expr{
                                  Binary: &parser.BinaryExpr{
                                    Left: &parser.Expr{
                                      Unary: &parser.UnaryExpr{
                                        Primary: &parser.PrimaryExpr{
                                          Reference: &parser.ReferenceExpr{
                                            Name: &"fallback",
                                          },
                                        },
                                      },
                                    },
                                    Op: token.Op(token.OpCoalesce),
                                    Right: &parser.Expr{
                                      Unary: &parser.UnaryExpr{
                                        Primary: &parser.PrimaryExpr{
                                          Literal: &parser.Literal{
                                            String: &parser.String{
                                              Fragments: []*parser.StringFragment{
                                                {
                                                  Text: &"none",
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "powerOperation",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Power: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Binary: &parser.BinaryExpr{
                                Left: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"base",
                                      },
                                    },
                                  },
                                },
                                Op: token.Op(token.OpPow),
                                Right: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"exponent",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "modOperation",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Remainder: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Binary: &parser.BinaryExpr{
                                Left: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"dividend",
                                      },
                                    },
                                  },
                                },
                                Op: token.Op(token.OpMod),
                                Right: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"divisor",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "complexNested",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Data: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"getData",
                                    KeyPath: &parser.KeyPathExpr{
                                      Call: &parser.CallExpr{
                                        Arguments: []*parser.ArgumentExpr{
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Reference: &parser.ReferenceExpr{
                                                    Name: &"user",
                                                    KeyPath: &parser.KeyPathExpr{
                                                      Reference: &parser.ReferenceExpr{
                                                        Name: &"id",
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                      Next: &parser.KeyPathExpr{
                                        Reference: &parser.ReferenceExpr{
                                          Name: &"process",
                                          KeyPath: &parser.KeyPathExpr{
                                            Call: &parser.CallExpr{
                                              Arguments: []*parser.ArgumentExpr{
                                                {
                                                  Expr: &parser.Expr{
                                                    Unary: &parser.UnaryExpr{
                                                      Primary: &parser.PrimaryExpr{
                                                        Reference: &parser.ReferenceExpr{
                                                          Name: &"options",
                                                          KeyPath: &parser.KeyPathExpr{
                                                            Subscript: &parser.Expr{
                                                              Unary: &parser.UnaryExpr{
                                                                Primary: &parser.PrimaryExpr{
                                                                  Literal: &parser.Literal{
                                                                    Number: &"0",
                                                                  },
                                                                },
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                            Next: &parser.KeyPathExpr{
                                              Reference: &parser.ReferenceExpr{
                                                Name: &"result",
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "lambdaInString",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Mapped: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"items",
                                    KeyPath: &parser.KeyPathExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"map",
                                        KeyPath: &parser.KeyPathExpr{
                                          Call: &parser.CallExpr{
                                            Arguments: []*parser.ArgumentExpr{
                                              {
                                                Expr: &parser.Expr{
                                                  Unary: &parser.UnaryExpr{
                                                    Primary: &parser.PrimaryExpr{
                                                      Lambda: &parser.LambdaExpr{
                                                        Parameters: []*parser.LambdaParameter{
                                                          {
                                                            Name: "x",
                                                          },
                                                        },
                                                        Return: &parser.TypeDecl{
                                                          Value: &"int",
                                                        },
                                                        Stmts: []*parser.Stmt{
                                                          {
                                                            Expr: &parser.Expr{
                                                              Binary: &parser.BinaryExpr{
                                                                Left: &parser.Expr{
                                                                  Unary: &parser.UnaryExpr{
                                                                    Primary: &parser.PrimaryExpr{
                                                                      Reference: &parser.ReferenceExpr{
                                                                        Name: &"x",
                                                                      },
                                                                    },
                                                                  },
                                                                },
                                                                Op: token.Op(token.OpMul),
                                                                Right: &parser.Expr{
                                                                  Unary: &parser.UnaryExpr{
                                                                    Primary: &parser.PrimaryExpr{
                                                                      Literal: &parser.Literal{
                                                                        Number: &"2",
                                                                      },
                                                                    },
                                                                  },
                                                                },
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "lambdaInString",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Mapped: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"items",
                                    KeyPath: &parser.KeyPathExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"map",
                                        KeyPath: &parser.KeyPathExpr{
                                          Call: &parser.CallExpr{
                                            Arguments: []*parser.ArgumentExpr{
                                              {
                                                Expr: &parser.Expr{
                                                  Unary: &parser.UnaryExpr{
                                                    Primary: &parser.PrimaryExpr{
                                                      Literal: &parser.Literal{
                                                        Map: &parser.MapLiteral{
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "mappedItems",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Mapped: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"mapDoubled",
                                    KeyPath: &parser.KeyPathExpr{
                                      Call: &parser.CallExpr{
                                        Arguments: []*parser.ArgumentExpr{
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Reference: &parser.ReferenceExpr{
                                                    Name: &"items",
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "conditionalNested",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Chain: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"getChainedValue",
                                    KeyPath: &parser.KeyPathExpr{
                                      Call: &parser.CallExpr{
                                        Arguments: []*parser.ArgumentExpr{
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Reference: &parser.ReferenceExpr{
                                                    Name: &"a",
                                                  },
                                                },
                                              },
                                            },
                                          },
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Reference: &parser.ReferenceExpr{
                                                    Name: &"b",
                                                  },
                                                },
                                              },
                                            },
                                          },
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Reference: &parser.ReferenceExpr{
                                                    Name: &"c",
                                                  },
                                                },
                                              },
                                            },
                                          },
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Reference: &parser.ReferenceExpr{
                                                    Name: &"d",
                                                  },
                                                },
                                              },
                                            },
                                          },
                                          {
                                            Expr: &parser.Expr{
                                              Unary: &parser.UnaryExpr{
                                                Primary: &parser.PrimaryExpr{
                                                  Reference: &parser.ReferenceExpr{
                                                    Name: &"e",
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Data: &parser.DataDecl{
        Name: "RawDollarEdgeCases",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "simpleDollar",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Price: ",
                          },
                          {
                            Text: &"$",
                          },
                          {
                            Text: &"5.99",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "multipleDollars",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Costs: ",
                          },
                          {
                            Text: &"$",
                          },
                          {
                            Text: &"10, ",
                          },
                          {
                            Text: &"$",
                          },
                          {
                            Text: &"20, ",
                          },
                          {
                            Text: &"$",
                          },
                          {
                            Text: &"30",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "dollarInMiddle",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"The ",
                          },
                          {
                            Text: &"$",
                          },
                          {
                            Text: &"amount was paid",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "dollarAtEnd",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Total cost: ",
                          },
                          {
                            Text: &"$",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "dollarAtStart",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"$",
                          },
                          {
                            Text: &"variable assignment",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "escapedDollar",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Literal ",
                          },
                          {
                            Esc: &"\\\\",
                          },
                          {
                            Text: &"$",
                          },
                          {
                            Text: &"dollar sign",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "dollarWithoutBrace",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Not interpolation: ",
                          },
                          {
                            Text: &"$",
                          },
                          {
                            Text: &"variable",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "dollarBeforeNumber",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Amount: ",
                          },
                          {
                            Text: &"$",
                          },
                          {
                            Text: &"123.45",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "dollarInPath",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Path: /home/",
                          },
                          {
                            Text: &"$",
                          },
                          {
                            Text: &"USER/documents",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "dollarInUrl",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"URL: https://api.com/v1/",
                          },
                          {
                            Text: &"$",
                          },
                          {
                            Text: &"resource",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "multipleRawDollars",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"$",
                          },
                          {
                            Text: &" ",
                          },
                          {
                            Text: &"$",
                          },
                          {
                            Text: &" ",
                          },
                          {
                            Text: &"$",
                          },
                          {
                            Text: &" multiple dollars",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "dollarWithPunctuation",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Cost: ",
                          },
                          {
                            Text: &"$",
                          },
                          {
                            Text: &"1,234.56!",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Data: &parser.DataDecl{
        Name: "AdditionalEscapeSequences",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "carriageReturn",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Line 1",
                          },
                          {
                            Esc: &"\\r",
                          },
                          {
                            Text: &"Line 2",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "formFeed",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Page 1",
                          },
                          {
                            Esc: &"\\f",
                          },
                          {
                            Text: &"Page 2",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "verticalTab",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Col 1",
                          },
                          {
                            Esc: &"\\v",
                          },
                          {
                            Text: &"Col 2",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "nullChar",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Text",
                          },
                          {
                            Esc: &"\\x",
                          },
                          {
                            Text: &"00End",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "bellChar",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Alert",
                          },
                          {
                            Esc: &"\\x",
                          },
                          {
                            Text: &"07Sound",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "hexEscape",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Hex: ",
                          },
                          {
                            Esc: &"\\x",
                          },
                          {
                            Text: &"41",
                          },
                          {
                            Esc: &"\\x",
                          },
                          {
                            Text: &"42",
                          },
                          {
                            Esc: &"\\x",
                          },
                          {
                            Text: &"43",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "octalEscape",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Octal: ",
                          },
                          {
                            Esc: &"\\1",
                          },
                          {
                            Text: &"01",
                          },
                          {
                            Esc: &"\\1",
                          },
                          {
                            Text: &"02",
                          },
                          {
                            Esc: &"\\1",
                          },
                          {
                            Text: &"03",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "unicodeShort",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Unicode: ",
                          },
                          {
                            Esc: &"\\u",
                          },
                          {
                            Text: &"0041",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "unicodeLong",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Unicode: ",
                          },
                          {
                            Esc: &"\\U",
                          },
                          {
                            Text: &"00000041",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Data: &parser.DataDecl{
        Name: "PotentiallyProblematicCases",
        Members: []*parser.MemberDecl{
          {
            Field: &parser.FieldDecl{
              Name: "invalidEscape",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Bad escape: ",
                          },
                          {
                            Esc: &"\\q",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "malformedInterpolation",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Bad: ",
                          },
                          {
                            Text: &"$",
                          },
                          {
                            Text: &"unclosed",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "extraCloseBrace",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Extra: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"value",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &"}",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "veryLongString",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"This is a very long string that contains many characters to test the parser's ability to handle large string literals without any issues or performance degradation during the parsing phase of the Bazaar templating language processing pipeline",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "manyInterpolations",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"a",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"b",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"c",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"d",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"e",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"f",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"g",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"h",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"i",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"j",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"k",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"l",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"m",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"n",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"o",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"p",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"q",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"r",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"s",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"t",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"u",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"v",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"w",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"x",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"y",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"z",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Field: &parser.FieldDecl{
              Name: "deeplyNestedExpressions",
              Type: &parser.TypeDecl{
                Value: &"string",
              },
              Default: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Result: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"obj",
                                    KeyPath: &parser.KeyPathExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"level1",
                                        KeyPath: &parser.KeyPathExpr{
                                          Reference: &parser.ReferenceExpr{
                                            Name: &"level2",
                                            KeyPath: &parser.KeyPathExpr{
                                              Reference: &parser.ReferenceExpr{
                                                Name: &"level3",
                                                KeyPath: &parser.KeyPathExpr{
                                                  Reference: &parser.ReferenceExpr{
                                                    Name: &"level4",
                                                    KeyPath: &parser.KeyPathExpr{
                                                      Reference: &parser.ReferenceExpr{
                                                        Name: &"level5",
                                                        KeyPath: &parser.KeyPathExpr{
                                                          Reference: &parser.ReferenceExpr{
                                                            Name: &"getValue",
                                                            KeyPath: &parser.KeyPathExpr{
                                                              Call: &parser.CallExpr{
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      Function: &parser.FunctionDecl{
        Name: "StringOperations",
        Block: []*parser.Stmt{
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"greeting",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Hello, ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"name",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &"!",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"path",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"/api/v1/users/",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"userId",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &"/profile",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"message",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Error ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"code",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &": ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"description",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"complex",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Processing ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"items",
                                    KeyPath: &parser.KeyPathExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"length",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &" items",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"multiline",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"First line",
                          },
                          {
                            Esc: &"\\n",
                          },
                          {
                            Text: &"Second line",
                          },
                          {
                            Esc: &"\\n",
                          },
                          {
                            Text: &"Third line",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"escaped",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"He said: ",
                          },
                          {
                            Esc: &"\\\"",
                          },
                          {
                            Text: &"Hello, world!",
                          },
                          {
                            Esc: &"\\\"",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"interpolatedConcat",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          String: &parser.String{
                            Fragments: []*parser.StringFragment{
                              {
                                Text: &"Part1: ",
                              },
                              {
                                Expr: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"part1",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpAdd),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          String: &parser.String{
                            Fragments: []*parser.StringFragment{
                              {
                                Text: &" Part2: ",
                              },
                              {
                                Expr: &parser.Expr{
                                  Unary: &parser.UnaryExpr{
                                    Primary: &parser.PrimaryExpr{
                                      Reference: &parser.ReferenceExpr{
                                        Name: &"part2",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"mixedTypes",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Number: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"42",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &" Boolean: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Bool: &parser.Bool(true),
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &" Null: ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Null: true,
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"nestedQuotes",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"Outer ",
                          },
                          {
                            Esc: &"\\\"",
                          },
                          {
                            Text: &"Inner ",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"value",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &" String",
                          },
                          {
                            Esc: &"\\\"",
                          },
                          {
                            Text: &" End",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"pathLike",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"/path/to/",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"resource",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &"/",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"id",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &".",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"extension",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"templateEngine",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Literal: &parser.Literal{
                      String: &parser.String{
                        Fragments: []*parser.StringFragment{
                          {
                            Text: &"{{",
                          },
                          {
                            Expr: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"variable",
                                  },
                                },
                              },
                            },
                          },
                          {
                            Text: &"}}",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}

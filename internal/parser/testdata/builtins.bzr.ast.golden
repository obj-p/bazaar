&parser.Bazaar{
  Package: &parser.PackageDecl{
    Domain: []string{
      "builtins",
    },
  },
  Decls: []*parser.TopLevelDecl{
    {
      Function: &parser.FunctionDecl{
        Name: "BuiltinFunctions",
        Parameters: []*parser.ParameterDecl{
          {
            Name: "list",
            Type: &parser.TypeDecl{
              Array: &parser.ArrayTypeDecl{
                Value: parser.TypeDecl{
                  Value: &"string",
                },
              },
            },
          },
          {
            Name: "items",
            Type: &parser.TypeDecl{
              Array: &parser.ArrayTypeDecl{
                Value: parser.TypeDecl{
                  Value: &"int",
                },
              },
            },
          },
        },
        Block: []*parser.Stmt{
          {
            For: &parser.ForStmt{
              Dest: &parser.VariableExpr{
                Name: &"i",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Reference: &parser.ReferenceExpr{
                      Name: &"range",
                      KeyPath: &parser.KeyPathExpr{
                        Call: &parser.CallExpr{
                          Arguments: []*parser.ArgumentExpr{
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Literal: &parser.Literal{
                                      Number: &"0",
                                    },
                                  },
                                },
                              },
                            },
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Literal: &parser.Literal{
                                      Number: &"10",
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            For: &parser.ForStmt{
              Dest: &parser.VariableExpr{
                Destructuring: &parser.DestructuringExpr{
                  Names: []string{
                    "idx",
                    "val",
                  },
                },
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Reference: &parser.ReferenceExpr{
                      Name: &"enumerate",
                      KeyPath: &parser.KeyPathExpr{
                        Call: &parser.CallExpr{
                          Arguments: []*parser.ArgumentExpr{
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Reference: &parser.ReferenceExpr{
                                      Name: &"list",
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"size",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Reference: &parser.ReferenceExpr{
                      Name: &"len",
                      KeyPath: &parser.KeyPathExpr{
                        Call: &parser.CallExpr{
                          Arguments: []*parser.ArgumentExpr{
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Reference: &parser.ReferenceExpr{
                                      Name: &"items",
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            If: &parser.IfStmt{
              Fragments: []*parser.IfFragment{
                {
                  Expr: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Reference: &parser.ReferenceExpr{
                              Name: &"len",
                              KeyPath: &parser.KeyPathExpr{
                                Call: &parser.CallExpr{
                                  Arguments: []*parser.ArgumentExpr{
                                    {
                                      Expr: &parser.Expr{
                                        Unary: &parser.UnaryExpr{
                                          Primary: &parser.PrimaryExpr{
                                            Reference: &parser.ReferenceExpr{
                                              Name: &"items",
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpGt),
                      Right: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"0",
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            For: &parser.ForStmt{
              Dest: &parser.VariableExpr{
                Name: &"i",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Reference: &parser.ReferenceExpr{
                      Name: &"range",
                      KeyPath: &parser.KeyPathExpr{
                        Call: &parser.CallExpr{
                          Arguments: []*parser.ArgumentExpr{
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Literal: &parser.Literal{
                                      Number: &"0",
                                    },
                                  },
                                },
                              },
                            },
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Reference: &parser.ReferenceExpr{
                                      Name: &"len",
                                      KeyPath: &parser.KeyPathExpr{
                                        Call: &parser.CallExpr{
                                          Arguments: []*parser.ArgumentExpr{
                                            {
                                              Expr: &parser.Expr{
                                                Unary: &parser.UnaryExpr{
                                                  Primary: &parser.PrimaryExpr{
                                                    Reference: &parser.ReferenceExpr{
                                                      Name: &"list",
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"rangeVar",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Reference: &parser.ReferenceExpr{
                      Name: &"range",
                      KeyPath: &parser.KeyPathExpr{
                        Call: &parser.CallExpr{
                          Arguments: []*parser.ArgumentExpr{
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Literal: &parser.Literal{
                                      Number: &"1",
                                    },
                                  },
                                },
                              },
                            },
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Literal: &parser.Literal{
                                      Number: &"5",
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"enumerateVar",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Reference: &parser.ReferenceExpr{
                      Name: &"enumerate",
                      KeyPath: &parser.KeyPathExpr{
                        Call: &parser.CallExpr{
                          Arguments: []*parser.ArgumentExpr{
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Reference: &parser.ReferenceExpr{
                                      Name: &"items",
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"lengthCheck",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Reference: &parser.ReferenceExpr{
                          Name: &"len",
                          KeyPath: &parser.KeyPathExpr{
                            Call: &parser.CallExpr{
                              Arguments: []*parser.ArgumentExpr{
                                {
                                  Expr: &parser.Expr{
                                    Unary: &parser.UnaryExpr{
                                      Primary: &parser.PrimaryExpr{
                                        Reference: &parser.ReferenceExpr{
                                          Name: &"list",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpAdd),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Reference: &parser.ReferenceExpr{
                          Name: &"len",
                          KeyPath: &parser.KeyPathExpr{
                            Call: &parser.CallExpr{
                              Arguments: []*parser.ArgumentExpr{
                                {
                                  Expr: &parser.Expr{
                                    Unary: &parser.UnaryExpr{
                                      Primary: &parser.PrimaryExpr{
                                        Reference: &parser.ReferenceExpr{
                                          Name: &"items",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            For: &parser.ForStmt{
              Dest: &parser.VariableExpr{
                Destructuring: &parser.DestructuringExpr{
                  Names: []string{
                    "i",
                    "item",
                  },
                },
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Reference: &parser.ReferenceExpr{
                      Name: &"enumerate",
                      KeyPath: &parser.KeyPathExpr{
                        Call: &parser.CallExpr{
                          Arguments: []*parser.ArgumentExpr{
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Reference: &parser.ReferenceExpr{
                                      Name: &"range",
                                      KeyPath: &parser.KeyPathExpr{
                                        Call: &parser.CallExpr{
                                          Arguments: []*parser.ArgumentExpr{
                                            {
                                              Expr: &parser.Expr{
                                                Unary: &parser.UnaryExpr{
                                                  Primary: &parser.PrimaryExpr{
                                                    Literal: &parser.Literal{
                                                      Number: &"0",
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                            {
                                              Expr: &parser.Expr{
                                                Unary: &parser.UnaryExpr{
                                                  Primary: &parser.PrimaryExpr{
                                                    Reference: &parser.ReferenceExpr{
                                                      Name: &"len",
                                                      KeyPath: &parser.KeyPathExpr{
                                                        Call: &parser.CallExpr{
                                                          Arguments: []*parser.ArgumentExpr{
                                                            {
                                                              Expr: &parser.Expr{
                                                                Unary: &parser.UnaryExpr{
                                                                  Primary: &parser.PrimaryExpr{
                                                                    Reference: &parser.ReferenceExpr{
                                                                      Name: &"list",
                                                                    },
                                                                  },
                                                                },
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            For: &parser.ForStmt{
              Dest: &parser.VariableExpr{
                Name: &"entry",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Reference: &parser.ReferenceExpr{
                      Name: &"enumerate",
                      KeyPath: &parser.KeyPathExpr{
                        Call: &parser.CallExpr{
                          Arguments: []*parser.ArgumentExpr{
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Reference: &parser.ReferenceExpr{
                                      Name: &"list",
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"complexRange",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Reference: &parser.ReferenceExpr{
                      Name: &"range",
                      KeyPath: &parser.KeyPathExpr{
                        Call: &parser.CallExpr{
                          Arguments: []*parser.ArgumentExpr{
                            {
                              Expr: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Reference: &parser.ReferenceExpr{
                                      Name: &"len",
                                      KeyPath: &parser.KeyPathExpr{
                                        Call: &parser.CallExpr{
                                          Arguments: []*parser.ArgumentExpr{
                                            {
                                              Expr: &parser.Expr{
                                                Unary: &parser.UnaryExpr{
                                                  Primary: &parser.PrimaryExpr{
                                                    Reference: &parser.ReferenceExpr{
                                                      Name: &"items",
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            {
                              Expr: &parser.Expr{
                                Binary: &parser.BinaryExpr{
                                  Left: &parser.Expr{
                                    Unary: &parser.UnaryExpr{
                                      Primary: &parser.PrimaryExpr{
                                        Reference: &parser.ReferenceExpr{
                                          Name: &"len",
                                          KeyPath: &parser.KeyPathExpr{
                                            Call: &parser.CallExpr{
                                              Arguments: []*parser.ArgumentExpr{
                                                {
                                                  Expr: &parser.Expr{
                                                    Unary: &parser.UnaryExpr{
                                                      Primary: &parser.PrimaryExpr{
                                                        Reference: &parser.ReferenceExpr{
                                                          Name: &"items",
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                  Op: token.Op(token.OpAdd),
                                  Right: &parser.Expr{
                                    Unary: &parser.UnaryExpr{
                                      Primary: &parser.PrimaryExpr{
                                        Literal: &parser.Literal{
                                          Number: &"10",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}

package todo

// This file tracks language features that are not yet supported but may be added in the future.
// Each section contains commented-out examples and TODO comments for systematic tracking.

data UnsupportedNumericLiterals {
    // TODO: Binary number literals (0b prefix)
    // Support for: 0b1010, 0b1111, 0B0001
    // binaryValue int = 0b1010
    // binaryFlags int = 0b11110000

    // TODO: Hexadecimal number literals (0x prefix)
    // Support for: 0xFF, 0x1A2B, 0X123
    // hexValue int = 0xFF
    // hexColor int = 0x1A2B3C

    // TODO: Octal number literals (0o prefix and legacy 0 prefix)
    // Support for: 0o755, 0o644, 0755 (legacy)
    // octalPermissions int = 0o755
    // legacyOctal int = 0644
}

data UnsupportedStringEscapes {
    // TODO: Hexadecimal escape sequences (\x prefix)
    // Support for: \x41 (represents 'A'), \xFF
    // Note: Not supported in Kotlin, would need conversion to \u0041
    // hexEscape string = "Hex character: \x41"
    // hexBytes string = "Byte sequence: \x00\xFF\x7F"

    // TODO: Octal escape sequences (\nnn format)
    // Support for: \101 (represents 'A'), \377
    // Note: Not supported in Kotlin/Swift, would need conversion
    // octalEscape string = "Octal character: \101"
    // octalNull string = "Null byte: \000"

    // TODO: Raw string literals (multi-line, no escaping)
    // Support for: """raw content""" or similar syntax
    // rawString string = """This would be
    // a multi-line string with no escape processing
    // including literal \n and ${expressions}"""
}

data UnsupportedOperators {
    // TODO: Ternary conditional operator (? :)
    // Useful for conditional expressions, especially in string interpolation
    // result string = condition ? "yes" : "no"
    // interpolated string = "Status: ${isActive ? "online" : "offline"}"

    // TODO: Null-safe navigation operator (?.)
    // Safe access to potentially null values
    // length int = user?.name?.length

    // TODO: Elvis operator (?:) for null coalescing with expressions
    // Different from ?? which only handles null values
    // name string = user?.name ?: "Unknown"
}

data UnsupportedControlFlow {
    // TODO: Break and continue statements for loops
    // Standard loop control flow
    // for item in items {
    //     if shouldSkip(item) { continue }
    //     if shouldStop(item) { break }
    //     process(item)
    // }

    // TODO: Labeled break/continue for nested loops
    // outer: for i in range1 {
    //     for j in range2 {
    //         if condition { break outer }
    //     }
    // }

    // TODO: Guard statements for early returns
    // guard condition else { return }
}

data UnsupportedDataStructures {
    // TODO: Set literals [unique collection]
    // setValues set = {1, 2, 3, 1} // would contain {1, 2, 3}

    // TODO: Tuple literals and destructuring
    // coordinate tuple = (x: 10, y: 20)
    // var (x, y) = coordinate

    // TODO: Range expressions
    // numbers range = 1..10
    // chars range = 'a'..'z'
}

func UnsupportedFeatureExamples() {
    // TODO: Async/await syntax
    // result = await fetchData()

    // TODO: Pattern matching/when expressions
    // result = when (value) {
    //     is String -> "text"
    //     is Int -> "number"
    //     else -> "unknown"
    // }

    // TODO: Generics/type parameters
    // func process<T>(value T) -> T { return value }

    // TODO: Extension functions
    // extend String {
    //     func reversed() -> String { ... }
    // }
}

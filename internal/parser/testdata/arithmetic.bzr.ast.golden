&parser.Bazaar{
  Package: &parser.PackageDecl{
    Domain: []string{
      "arithmetic",
    },
  },
  Decls: []*parser.TopLevelDecl{
    {
      Function: &parser.FunctionDecl{
        Name: "Arithmetic",
        Block: []*parser.Stmt{
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"answer",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Binary: &parser.BinaryExpr{
                          Left: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"42",
                                },
                              },
                            },
                          },
                          Op: token.Op(token.OpMul),
                          Right: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"1",
                                },
                              },
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpAdd),
                      Right: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"1",
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpSub),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"1",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"mulDiv",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"12",
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpDiv),
                      Right: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"3",
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpMul),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"4",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"divMul",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"12",
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpMul),
                      Right: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"3",
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpDiv),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"4",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"mulMod",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"10",
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpMul),
                      Right: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"3",
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpMod),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"7",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"modMul",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"10",
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpMod),
                      Right: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"3",
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpMul),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"7",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"divMod",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"20",
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpDiv),
                      Right: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"4",
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpMod),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"3",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"modDiv",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"20",
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpMod),
                      Right: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"6",
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpDiv),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"2",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"complex1",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"2",
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpAdd),
                      Right: &parser.Expr{
                        Binary: &parser.BinaryExpr{
                          Left: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"3",
                                },
                              },
                            },
                          },
                          Op: token.Op(token.OpMul),
                          Right: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"4",
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpSub),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"5",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"complex2",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"10",
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpSub),
                      Right: &parser.Expr{
                        Binary: &parser.BinaryExpr{
                          Left: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"6",
                                },
                              },
                            },
                          },
                          Op: token.Op(token.OpDiv),
                          Right: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"2",
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpAdd),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"1",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"complex3",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"15",
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpAdd),
                  Right: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Binary: &parser.BinaryExpr{
                          Left: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"8",
                                },
                              },
                            },
                          },
                          Op: token.Op(token.OpMod),
                          Right: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"3",
                                },
                              },
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpMul),
                      Right: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"2",
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"complex4",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Binary: &parser.BinaryExpr{
                          Left: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"20",
                                },
                              },
                            },
                          },
                          Op: token.Op(token.OpDiv),
                          Right: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"4",
                                },
                              },
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpAdd),
                      Right: &parser.Expr{
                        Binary: &parser.BinaryExpr{
                          Left: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"3",
                                },
                              },
                            },
                          },
                          Op: token.Op(token.OpMul),
                          Right: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"2",
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpSub),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"1",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"allOps",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"100",
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpAdd),
                      Right: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"50",
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpSub),
                  Right: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Binary: &parser.BinaryExpr{
                          Left: &parser.Expr{
                            Binary: &parser.BinaryExpr{
                              Left: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Literal: &parser.Literal{
                                      Number: &"20",
                                    },
                                  },
                                },
                              },
                              Op: token.Op(token.OpMul),
                              Right: &parser.Expr{
                                Unary: &parser.UnaryExpr{
                                  Primary: &parser.PrimaryExpr{
                                    Literal: &parser.Literal{
                                      Number: &"2",
                                    },
                                  },
                                },
                              },
                            },
                          },
                          Op: token.Op(token.OpDiv),
                          Right: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Literal: &parser.Literal{
                                  Number: &"4",
                                },
                              },
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpMod),
                      Right: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"3",
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"unaryMinus1",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"-5",
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpAdd),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"3",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"unaryMinus2",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"2",
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpMul),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"-3",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"unaryMinus3",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"-10",
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpDiv),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"2",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"unaryMinus4",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"-4",
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpMod),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"3",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"grouped1",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Nested: &parser.Expr{
                          Binary: &parser.BinaryExpr{
                            Left: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"2",
                                  },
                                },
                              },
                            },
                            Op: token.Op(token.OpAdd),
                            Right: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"3",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpMul),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"4",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"grouped2",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"2",
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpMul),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Nested: &parser.Expr{
                          Binary: &parser.BinaryExpr{
                            Left: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"3",
                                  },
                                },
                              },
                            },
                            Op: token.Op(token.OpAdd),
                            Right: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"4",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"grouped3",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Nested: &parser.Expr{
                          Binary: &parser.BinaryExpr{
                            Left: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"10",
                                  },
                                },
                              },
                            },
                            Op: token.Op(token.OpSub),
                            Right: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"2",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpDiv),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Nested: &parser.Expr{
                          Binary: &parser.BinaryExpr{
                            Left: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"3",
                                  },
                                },
                              },
                            },
                            Op: token.Op(token.OpAdd),
                            Right: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"1",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"grouped4",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Op: token.Op(token.OpSub),
                      Primary: &parser.PrimaryExpr{
                        Nested: &parser.Expr{
                          Binary: &parser.BinaryExpr{
                            Left: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"2",
                                  },
                                },
                              },
                            },
                            Op: token.Op(token.OpAdd),
                            Right: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"3",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpMul),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"4",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"nested1",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Nested: &parser.Expr{
                          Binary: &parser.BinaryExpr{
                            Left: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Nested: &parser.Expr{
                                    Binary: &parser.BinaryExpr{
                                      Left: &parser.Expr{
                                        Unary: &parser.UnaryExpr{
                                          Primary: &parser.PrimaryExpr{
                                            Literal: &parser.Literal{
                                              Number: &"2",
                                            },
                                          },
                                        },
                                      },
                                      Op: token.Op(token.OpAdd),
                                      Right: &parser.Expr{
                                        Unary: &parser.UnaryExpr{
                                          Primary: &parser.PrimaryExpr{
                                            Literal: &parser.Literal{
                                              Number: &"3",
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            Op: token.Op(token.OpMul),
                            Right: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"4",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpSub),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"1",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"nested2",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"2",
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpMul),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Nested: &parser.Expr{
                          Binary: &parser.BinaryExpr{
                            Left: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Nested: &parser.Expr{
                                    Binary: &parser.BinaryExpr{
                                      Left: &parser.Expr{
                                        Unary: &parser.UnaryExpr{
                                          Primary: &parser.PrimaryExpr{
                                            Literal: &parser.Literal{
                                              Number: &"10",
                                            },
                                          },
                                        },
                                      },
                                      Op: token.Op(token.OpSub),
                                      Right: &parser.Expr{
                                        Unary: &parser.UnaryExpr{
                                          Primary: &parser.PrimaryExpr{
                                            Literal: &parser.Literal{
                                              Number: &"6",
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            Op: token.Op(token.OpDiv),
                            Right: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"2",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"nested3",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Nested: &parser.Expr{
                          Binary: &parser.BinaryExpr{
                            Left: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"5",
                                  },
                                },
                              },
                            },
                            Op: token.Op(token.OpAdd),
                            Right: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Nested: &parser.Expr{
                                    Binary: &parser.BinaryExpr{
                                      Left: &parser.Expr{
                                        Unary: &parser.UnaryExpr{
                                          Primary: &parser.PrimaryExpr{
                                            Literal: &parser.Literal{
                                              Number: &"3",
                                            },
                                          },
                                        },
                                      },
                                      Op: token.Op(token.OpMul),
                                      Right: &parser.Expr{
                                        Unary: &parser.UnaryExpr{
                                          Primary: &parser.PrimaryExpr{
                                            Literal: &parser.Literal{
                                              Number: &"2",
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpSub),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Nested: &parser.Expr{
                          Binary: &parser.BinaryExpr{
                            Left: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"8",
                                  },
                                },
                              },
                            },
                            Op: token.Op(token.OpDiv),
                            Right: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"4",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"mixedTypes1",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"10",
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpAdd),
                  Right: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"3.5",
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpMul),
                      Right: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"2",
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"mixedTypes2",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"15.0",
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpDiv),
                      Right: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"3",
                            },
                          },
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpSub),
                  Right: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"1",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"mixedTypes3",
              },
              Source: &parser.Expr{
                Binary: &parser.BinaryExpr{
                  Left: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Literal: &parser.Literal{
                          Number: &"-2.5",
                        },
                      },
                    },
                  },
                  Op: token.Op(token.OpAdd),
                  Right: &parser.Expr{
                    Binary: &parser.BinaryExpr{
                      Left: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"5",
                            },
                          },
                        },
                      },
                      Op: token.Op(token.OpMul),
                      Right: &parser.Expr{
                        Unary: &parser.UnaryExpr{
                          Primary: &parser.PrimaryExpr{
                            Literal: &parser.Literal{
                              Number: &"2",
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}

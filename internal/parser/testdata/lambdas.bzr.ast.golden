&parser.Bazaar{
  Package: &parser.PackageDecl{
    Domain: []string{
      "lambdas",
    },
  },
  Decls: []*parser.TopLevelDecl{
    {
      Template: &parser.TemplateDecl{
        Name: "Lambdas",
        Block: []*parser.Stmt{
          {
            Call: &parser.CallStmt{
              Name: &"Foo",
              LambdaOnly: &parser.LambdaExpr{
              },
            },
          },
          {
            Call: &parser.CallStmt{
              Name: &"Foo",
              LambdaOnly: &parser.LambdaExpr{
                Stmts: []*parser.Stmt{
                  {
                    Call: &parser.CallStmt{
                      Name: &"Bar",
                    },
                  },
                },
              },
            },
          },
          {
            Call: &parser.CallStmt{
              Name: &"Foo",
              LambdaOnly: &parser.LambdaExpr{
                Stmts: []*parser.Stmt{
                  {
                    Call: &parser.CallStmt{
                      Name: &"Bar",
                      TrailingLambda: &parser.LambdaExpr{
                        Stmts: []*parser.Stmt{
                          {
                            Call: &parser.CallStmt{
                              Name: &"Baz",
                              LambdaOnly: &parser.LambdaExpr{
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Call: &parser.CallStmt{
              Name: &"Foo",
              TrailingLambda: &parser.LambdaExpr{
              },
            },
          },
          {
            Call: &parser.CallStmt{
              Name: &"Foo",
              TrailingLambda: &parser.LambdaExpr{
                Stmts: []*parser.Stmt{
                  {
                    Call: &parser.CallStmt{
                      Name: &"Bar",
                    },
                  },
                },
              },
            },
          },
          {
            Call: &parser.CallStmt{
              Name: &"Foo",
              TrailingLambda: &parser.LambdaExpr{
                Stmts: []*parser.Stmt{
                  {
                    Call: &parser.CallStmt{
                      Name: &"Bar",
                      TrailingLambda: &parser.LambdaExpr{
                        Stmts: []*parser.Stmt{
                          {
                            Call: &parser.CallStmt{
                              Name: &"Baz",
                              TrailingLambda: &parser.LambdaExpr{
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Call: &parser.CallStmt{
              Name: &"Foo",
              Arguments: []*parser.ArgumentExpr{
                {
                  Expr: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Reference: &parser.ReferenceExpr{
                          Name: &"bar",
                        },
                      },
                    },
                  },
                },
              },
              TrailingLambda: &parser.LambdaExpr{
                Parameters: []*parser.LambdaParameter{
                  {
                    Name: "bar",
                  },
                },
                Stmts: []*parser.Stmt{
                  {
                    Call: &parser.CallStmt{
                      Name: &"Bar",
                    },
                  },
                },
              },
            },
          },
          {
            Call: &parser.CallStmt{
              Name: &"Foo",
              Arguments: []*parser.ArgumentExpr{
                {
                  Expr: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Reference: &parser.ReferenceExpr{
                          Name: &"bar",
                        },
                      },
                    },
                  },
                },
              },
              TrailingLambda: &parser.LambdaExpr{
                Parameters: []*parser.LambdaParameter{
                  {
                    Name: "bar",
                  },
                },
                Return: &parser.TypeDecl{
                  Value: &"int",
                },
                Stmts: []*parser.Stmt{
                  {
                    Call: &parser.CallStmt{
                      Name: &"Bar",
                    },
                  },
                },
              },
            },
          },
          {
            Call: &parser.CallStmt{
              Name: &"Foo",
              Arguments: []*parser.ArgumentExpr{
                {
                  Expr: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Reference: &parser.ReferenceExpr{
                          Name: &"bar",
                        },
                      },
                    },
                  },
                },
              },
              TrailingLambda: &parser.LambdaExpr{
                Parameters: []*parser.LambdaParameter{
                  {
                    Name: "bar",
                    Type: &parser.TypeDecl{
                      Value: &"string",
                    },
                  },
                },
                Return: &parser.TypeDecl{
                  Value: &"int",
                },
                Stmts: []*parser.Stmt{
                  {
                    Call: &parser.CallStmt{
                      Name: &"Bar",
                      Arguments: []*parser.ArgumentExpr{
                        {
                          Expr: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Reference: &parser.ReferenceExpr{
                                  Name: &"bar",
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Call: &parser.CallStmt{
              Name: &"Foo",
              Arguments: []*parser.ArgumentExpr{
                {
                  Expr: &parser.Expr{
                    Unary: &parser.UnaryExpr{
                      Primary: &parser.PrimaryExpr{
                        Reference: &parser.ReferenceExpr{
                          Name: &"bar",
                        },
                      },
                    },
                  },
                },
              },
              TrailingLambda: &parser.LambdaExpr{
                Parameters: []*parser.LambdaParameter{
                  {
                    Name: "bar",
                    Type: &parser.TypeDecl{
                      Value: &"string",
                    },
                  },
                  {
                    Name: "baz",
                    Type: &parser.TypeDecl{
                      Value: &"string",
                    },
                  },
                },
                Return: &parser.TypeDecl{
                  Value: &"int",
                },
                Stmts: []*parser.Stmt{
                  {
                    Call: &parser.CallStmt{
                      Name: &"Bar",
                      Arguments: []*parser.ArgumentExpr{
                        {
                          Expr: &parser.Expr{
                            Unary: &parser.UnaryExpr{
                              Primary: &parser.PrimaryExpr{
                                Reference: &parser.ReferenceExpr{
                                  Name: &"bar",
                                },
                              },
                            },
                          },
                        },
                      },
                      TrailingLambda: &parser.LambdaExpr{
                        Stmts: []*parser.Stmt{
                          {
                            Call: &parser.CallStmt{
                              Name: &"Baz",
                              Arguments: []*parser.ArgumentExpr{
                                {
                                  Expr: &parser.Expr{
                                    Unary: &parser.UnaryExpr{
                                      Primary: &parser.PrimaryExpr{
                                        Reference: &parser.ReferenceExpr{
                                          Name: &"baz",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Call: &parser.CallStmt{
              Name: &"Foo",
              Arguments: []*parser.ArgumentExpr{
                {
                  Name: &"bar",
                  Lambda: &parser.LambdaExpr{
                    Stmts: []*parser.Stmt{
                      {
                        Call: &parser.CallStmt{
                          Name: &"Bar",
                        },
                      },
                    },
                  },
                },
              },
              TrailingLambda: &parser.LambdaExpr{
                Stmts: []*parser.Stmt{
                  {
                    Call: &parser.CallStmt{
                      Name: &"Baz",
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"foo",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Lambda: &parser.LambdaExpr{
                      Return: &parser.TypeDecl{
                        Value: &"int",
                      },
                      Stmts: []*parser.Stmt{
                        {
                          Return: &parser.ReturnStmt{
                            Value: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Literal: &parser.Literal{
                                    Number: &"42",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"foo",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Lambda: &parser.LambdaExpr{
                      Parameters: []*parser.LambdaParameter{
                        {
                          Name: "bar",
                        },
                      },
                      Return: &parser.TypeDecl{
                        Value: &"int",
                      },
                      Stmts: []*parser.Stmt{
                        {
                          Return: &parser.ReturnStmt{
                            Value: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"bar",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          {
            Var: &parser.VarDeclStmt{
              Dest: &parser.VariableExpr{
                Name: &"foo",
              },
              Source: &parser.Expr{
                Unary: &parser.UnaryExpr{
                  Primary: &parser.PrimaryExpr{
                    Lambda: &parser.LambdaExpr{
                      Parameters: []*parser.LambdaParameter{
                        {
                          Name: "bar",
                          Type: &parser.TypeDecl{
                            Value: &"int",
                          },
                        },
                      },
                      Return: &parser.TypeDecl{
                        Value: &"int",
                      },
                      Stmts: []*parser.Stmt{
                        {
                          Return: &parser.ReturnStmt{
                            Value: &parser.Expr{
                              Unary: &parser.UnaryExpr{
                                Primary: &parser.PrimaryExpr{
                                  Reference: &parser.ReferenceExpr{
                                    Name: &"bar",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
